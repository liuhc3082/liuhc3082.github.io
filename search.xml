<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>My New Post</title>
    <url>/2024/07/25/My-New-Post/</url>
    <content><![CDATA[<p>祝贺~第一支<a href="https://liuhc3082.github.io/">博客</a> ！&#x1f600;</p>
<p>hexo部署延迟好像很久，是我的错觉吗，，，<br><img src="/2024/07/25/My-New-Post/kitty.jpg" alt="猫猫"></p>
]]></content>
      <tags>
        <tag>☀️</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>C 从hello world到goodbye world</title>
    <url>/2024/09/13/C-%E4%BB%8Ehello-world%E5%88%B0goodbye-world/</url>
    <content><![CDATA[<p>WARNNING:学习过程中随手记录或网上复制黏贴的文字与代码，由于本人性格粗心以及认知不足，错误<del>较</del>非常之多，仅供参考呜呜</p>
<p><img src="/2024/09/13/C-%E4%BB%8Ehello-world%E5%88%B0goodbye-world/kitty.jpg" alt="猫猫"></p>
<h1 id="9-13"><a href="#9-13" class="headerlink" title="9&#x2F;13"></a>9&#x2F;13</h1><p>1.IDE（Integrated Development Environment）集成开发环境 &#x3D; 编辑器 + 编译器</p>
<p>推荐： DevC++  VScode</p>
<p>保存-编译运行&#x2F;F9</p>
<ol>
<li><p>%d  表示有符号十进制整数。</p>
</li>
<li><p>%f  表示单精度浮点数。</p>
</li>
<li><p>%c  表示字符。</p>
</li>
<li><p>%s  表示字符串。</p>
</li>
<li><p>%p  表示指针的值。</p>
</li>
<li><p>%x  表示十六进制整数。</p>
</li>
<li><p>%f 表述双精度浮点数。</p>
</li>
</ol>
<p>常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> AMOUNT = <span class="number">1000</span> <span class="comment">//变量，一经声明就要初始化</span></span><br><span class="line">    <span class="comment">//已声明的变量不能被声明为常量</span></span><br></pre></td></tr></table></figure>

<p>浮点数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>/<span class="number">3</span>=<span class="number">3.333333</span>	<span class="comment">//注：整数之间的运算一定得到整数，整数与浮点数都存在时，会把整数改成浮点数</span></span><br></pre></td></tr></table></figure>

<h1 id="循环switch-case"><a href="#循环switch-case" class="headerlink" title="循环switch case"></a>循环switch case</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">/* 可选的 */</span></span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">/* 可选的 */</span></span><br><span class="line">    <span class="comment">/* 您可以有任意数量的 case 语句 */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选的 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(today)&#123;</span><br><span class="line">	<span class="keyword">case</span> Mon:</span><br><span class="line">	<span class="keyword">case</span> Tus:</span><br><span class="line">	<span class="keyword">case</span> Wed:</span><br><span class="line">	<span class="keyword">case</span> Thu:</span><br><span class="line">	<span class="keyword">case</span> Fri:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;工作日(╯▔皿▔)╯&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Sat:</span><br><span class="line">    <span class="keyword">case</span> Sun</span><br><span class="line">    	<span class="title function_">printf</span><span class="params">(<span class="string">&quot;休息日o(*￣▽￣*)ブ&quot;</span>)</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a><strong>逗号表达式</strong></h2><p>(表达式1，表达式2，…，表达式n)，逗号优先级为最后，输出为表达式n（Casio的连续计算也是如此）</p>
<p>例</p>
<p><code>int b,c,a=(b=3,++(c=b*2)) ;</code></p>
<p>得 a&#x3D;7</p>
<h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>（条件 ? 表达式1 : 表达式2;），条件为真输出1，假输出2</p>
<p>例</p>
<p><code>int Max(int a,intb)&#123;return a &gt; b ? a : b;&#125;</code></p>
<h2 id="注意到"><a href="#注意到" class="headerlink" title="注意到"></a><strong>注意到</strong></h2><p><code>i++</code>表示先取i原先的值，再+1,</p>
<p><code>++i</code>表示先+1，再输出i</p>
<h2 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a><strong>变量的生命周期</strong></h2><p><strong>循环内和循环体均可以声明变量</strong>，且循环内定义的变量和循环外定义的变量，即使名称相同，其地址也是不同的，所以不会报错，当一次循环结束，变量死去</p>
<p>在int mian(){}主函数外定义或声明的变量为全局变量，在函数内部定义或声明的变量为局部变量</p>
<h2 id="用花括号划定作用域-scope-定义同名变量"><a href="#用花括号划定作用域-scope-定义同名变量" class="headerlink" title="用花括号划定作用域(scope),定义同名变量"></a>用花括号划定作用域(scope),定义同名变量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> i = <span class="number">3</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	 &#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>不报错</p>
<h1 id="定义和声明的区别"><a href="#定义和声明的区别" class="headerlink" title="定义和声明的区别"></a>定义和声明的区别</h1><p><strong>声明</strong>是用来告诉编译器变量的名称和类型，而不分配内存。</p>
<p><strong>定义</strong>是提供声明的实体的具体实现或分配存储空间。对于变量，定义是为其分配内存；对于函数或方法，定义是提供其代码体；对于类，定义是描述其结构和方法的代码块。</p>
<p>不初始化变量并不意味着不是定义了变量，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">000000000062FE1C</span><br></pre></td></tr></table></figure>

<p><em><strong>注1：有时，声明变量指不初始化变量，请根据语境注意辨析</strong></em></p>
<p>注2：整型全局变量一经声明就初始化为0</p>
<h2 id="使用extern声明在另一个文件里声明的变量-函数也行"><a href="#使用extern声明在另一个文件里声明的变量-函数也行" class="headerlink" title="使用extern声明在另一个文件里声明的变量(函数也行)"></a>使用extern声明在另一个文件里声明的变量(函数也行)</h2><p>在Dev C++中，要将两个文件放在同一个项目的同级里；在GCC中，可以同步编译。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> count;  <span class="comment">// 声明变量，不分配存储空间</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Main: %d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// other.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">10</span>;  <span class="comment">// 定义变量并分配存储空间</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Other: %d\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 main.c : <code>Main: 10</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明结构体</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buiding</span>;</span></span><br></pre></td></tr></table></figure>



<h2 id="使用extern声明另一个作用域-scope-的变量"><a href="#使用extern声明另一个作用域-scope-的变量" class="headerlink" title="使用extern声明另一个作用域(scope)的变量"></a>使用extern声明另一个作用域(scope)的变量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">plus</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//声明函数，让编译器先往下看 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">extern</span> <span class="type">int</span> count;<span class="comment">//不写报错：count was not declared in this scope ，因为count作为全局变量在主函下面才被声明 </span></span><br><span class="line">	plus();</span><br><span class="line">	count++;</span><br><span class="line">	print();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">plus</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">	count++;</span><br><span class="line">	print();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;count的值为%d\n&quot;</span>,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>形式：类型 数组名[常量-表示元素个数，即数组维度]</p>
<p> 如：int a[5]</p>
<p>访问：a[5]×  索引大于最大元素索引（0-4），造成<strong>数组越界（不会报错），会输出奇怪的东西（尚不明确），且可能造成死机（目前没碰到）</strong></p>
<p>也可以不填，<strong>直接用元素赋值</strong>，也是一种初始化方式：</p>
<p>如：int a[] &#x3D; {1,2,3,4,5}</p>
<p><strong>注意到</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b[i]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>0<br>35<br>0<br>0</p>
<p>得到了我不签无法理解的垃圾值，因此初始化很必要</p>
<p><code>int b[5] = &#123;4，1&#125;</code>	前几位为4，1，其余元素全部初始化为0</p>
<p><code>int a[8] = &#123;[1]=1,[4]=6&#125;</code></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>	<span class="comment">//字符串标准库</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s1[] = <span class="string">&quot;ysu&quot;</span>; <span class="comment">//&quot;&quot;包的是字符串常量 </span></span><br><span class="line">    <span class="type">char</span> s2[] =&#123;<span class="string">&quot;ysu&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> s3[] =&#123;<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;; <span class="comment">//&#x27;&#x27;包的是字符常量，单引号内只能填一个字符，表示字符常量 </span></span><br><span class="line"><span class="comment">//    s1[0] = &quot;z&quot;; 报错[Error] invalid conversion from &#x27;const char*&#x27; to &#x27;char&#x27; [-fpermissive]</span></span><br><span class="line">    s2[<span class="number">0</span>] = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    s3[<span class="number">0</span>] = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c\n&quot;</span>,s1[<span class="number">0</span>],s2[<span class="number">0</span>],s3[<span class="number">0</span>]);<span class="comment">//y z z</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//    char a=&quot;a&quot;;报错[Error] invalid conversion from &#x27;const char*&#x27; to &#x27;char&#x27; [-fpermissive]</span></span><br><span class="line">    <span class="type">char</span> a=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    a=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof_s2=%d\n&quot;</span>,<span class="keyword">sizeof</span>(s2)); <span class="comment">//sizeof_s2=4   strlen_s2=3</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;strlen_s2=%d\n&quot;</span>,<span class="built_in">strlen</span>(s2)); <span class="comment">//不考虑停止符</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s2); <span class="comment">//zsu</span></span><br><span class="line">	</span><br><span class="line">	s2[<span class="number">2</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s2); <span class="comment">// \0之后的会省略   zs</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> ss[]=<span class="string">&quot;qwerty&quot;</span> ; <span class="comment">//strcpy与strncpy</span></span><br><span class="line">	<span class="built_in">strcpy</span>(ss,s1); <span class="comment">//注意字符串不要溢出了，使用strncpy可限制复制字符串长度 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,ss); <span class="comment">//ysu</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">strcat</span>(s1,s2); <span class="comment">//连接，然后存到s1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s1); <span class="comment">//ysuzs</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="指针初步"><a href="#指针初步" class="headerlink" title="指针初步"></a>指针初步</h1><p>内存地址是一个<strong>正的十六进制数</strong>，每个变量的内存地址长度为4位或8位的16进制数（取决于默认的位数，32位平台占4字节，64位平台占8字节，用sizeof()看）</p>
<p><code>int a</code>整型变量a</p>
<p><code>int* a</code>或<code>int*a</code>或<code>int *a</code>指针变量a,指向某整型变量，其中a表示地址，通过<code>a=&amp;b</code>取址&#x2F;赋值，通过*a输出指向变量的值（即b)，a的加减乘除是无意义的，为了避免野指针，通常用<code>int* a = NULL</code>初始化,<strong>int±1移动4个字节（32位和64位都是）</strong></p>
<p><code>char*a</code>同理，也是8位地址，但是**+1只增加一字节内存**，因为ascii码只有1字节&#x3D;8位&#x3D;256bit  那么多种</p>
<p>注1：指针变量加1，即向后移动1 个位置表示指针变量指向下一个数据元素的<strong>首地址</strong>。而不是在原地址基础上加1。至于真实的地址加了多少，要看原来指针指向的数据类型是什么。</p>
<p>注2：*<strong>的优先级比较低</strong>（低于[]和++)，如果还有其他运算符，建议先（*p)，一个表达式如果输出为指针，那么他就是一个指针表达式。</p>
<p>数组的指针:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> a[] = <span class="string">&quot;we&quot;</span>;<span class="comment">//字符串&#123;‘w’,&#x27;e&#x27;,&#x27;\0&#x27;&#125;</span></span><br><span class="line">	<span class="type">char</span>* b = <span class="literal">NULL</span>;</span><br><span class="line">	b = a;<span class="comment">//不要加上&amp;a，会报错</span></span><br><span class="line">    <span class="comment">//此时字符串变量a退化为数组首地址，即‘w&#x27;的地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p  %c\n&quot;</span>,b,*b) ;</span><br><span class="line">	b++;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p  %c&quot;</span>,b,*b) ;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="number">000000000062F</span>E10  w</span><br><span class="line"><span class="number">000000000062F</span>E11  e</span><br></pre></td></tr></table></figure>

<p>可见，当一个指针赋值到一个数组，将指向这个数组的第一个元素，指针的移动导致元素序号的移动，说明数组中的数据是线性存储在内存中的。</p>
<h1 id="函数初步"><a href="#函数初步" class="headerlink" title="函数初步"></a>函数初步</h1><p><strong>C语言从上往下编译，主函数要放到最后。</strong></p>
<p>函数声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">func1<span class="comment">/*函数一功能*/</span></span><br><span class="line">func2<span class="comment">/*函数二功能*/</span></span><br></pre></td></tr></table></figure>



<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><p><code>#include&lt; &gt;</code>格式：引用标准库头文件，编译器从标准库目录开始搜索（包括编译器设置的路径）</p>
<p> <code>#include&quot; &quot;</code>格式：引用非标准库的头文件，编译器从用户的工作目录开始搜索</p>
<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void showcase(int x[][])	//不能这样传入数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">showcase</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> line,<span class="type">int</span> col)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;line;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d	&quot;</span>,*(a+i+j));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">//定义 </span></span><br><span class="line"><span class="comment">//	int a[][]=&#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;;//[Error] &#x27;a&#x27;没有声明过</span></span><br><span class="line">	<span class="type">int</span> a[<span class="number">4</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//正确定义：确定行列 这里是4*3的矩阵 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,a);<span class="comment">//数组变量名本身就传入了首地址，效果与printf(&quot;%p&quot;,&amp;a)相同 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数组的长度: %d&quot;</span>,<span class="keyword">sizeof</span>(a)); <span class="comment">//得 48</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数组的元素个数: %d&quot;</span>,<span class="keyword">sizeof</span>(a[<span class="number">0</span>])/<span class="number">4</span>);<span class="comment">//得 3 </span></span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> b[][<span class="number">3</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//至少声明二维长度，即列数（dev c++中报错被称为second），不填行数默认为1 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数组的长度: %d&quot;</span>,<span class="keyword">sizeof</span>(b)); <span class="comment">//得 12</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数组的元素个数: %d&quot;</span>,<span class="keyword">sizeof</span>(b[<span class="number">0</span>])/<span class="number">4</span>);<span class="comment">//得 3 </span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">//使用函数遍历二维数组	</span></span><br><span class="line">	showcase(&amp;a[<span class="number">0</span>][<span class="number">0</span>],<span class="number">4</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用嵌套指针遍历二维数组 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d	&quot;</span>,**(a+i+j));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//0       0       0</span></span><br><span class="line"><span class="comment">//0       0       0</span></span><br><span class="line"><span class="comment">//0       0       0</span></span><br><span class="line"><span class="comment">//0       0       0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="指针进阶"><a href="#指针进阶" class="headerlink" title="指针进阶"></a>指针进阶</h1><h2 id="NULL-指针-和-void-指针"><a href="#NULL-指针-和-void-指针" class="headerlink" title="NULL 指针 和 void 指针"></a>NULL 指针 和 void 指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//	void a; //[Error]变量或field声明无类型</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *a;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> c[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">a = &amp;b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a：%p  b：%p \n&quot;</span>,a,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//	printf(&quot;a：%d  b：%d \n&quot;,*a,b);//[Error]解引用空类型指针，编译器不知道要解到哪里 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a：%d  b：%d\n&quot;</span>,*(<span class="type">int</span>*)a,b);<span class="comment">//强制类型转换 </span></span><br><span class="line">	a = &amp;c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a：%p  c：%p &quot;</span>,a,&amp;c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>a：000000000062FE14  b：000000000062FE14<br>a：1  b：1<br>a：000000000062FE00  c：000000000062FE00</p>
</blockquote>
<p>注意：关于void指针，不同编译器行为有所不同，<strong>慎用</strong>，如使用，做好<strong>调试检查注释</strong> </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> *ptr = <span class="literal">NULL</span>;<span class="comment">//NULL是指向一个地址不存在变量的指针，避免了野指针的产生，毕竟野指针不报错，debug太恶心</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,ptr); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>0000000000000000</p>
<p>(Dev C++很久都无响应，半分钟后停止了，有的编译器是报错给你</p>
</blockquote>
<h2 id="指向指针（数组）的指针"><a href="#指向指针（数组）的指针" class="headerlink" title="指向指针（数组）的指针"></a>指向指针（数组）的指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> <span class="built_in">string</span>[] = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,<span class="built_in">string</span>[<span class="number">0</span>]);<span class="comment">//字符串就是指向收个字符的地址（首地址）的指针 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*<span class="built_in">string</span>);<span class="comment">// ss </span></span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span>* a[] = &#123;<span class="string">&quot;123&quot;</span>,<span class="string">&quot;456&quot;</span>,<span class="string">&quot;789&quot;</span>&#125;;</span><br><span class="line">	<span class="comment">//[]比*优先度更高，这里是定义了一个数组，元素是指向字符的指针，也就是字符串（首地址）啦 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a[<span class="number">0</span>]); <span class="comment">//123</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*a[<span class="number">1</span>]); <span class="comment">//4</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<strong>同级赋值</strong>很重要，如<code>int* a[] = &#123;0,0,0&#125;;int**ptr = a;</code></p>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define CONST &#x27;a&#x27;</span><br><span class="line">#define PRICE 15</span><br><span class="line"></span><br><span class="line">const int pi = 3.14 //const修饰，将变量变为只读变量，常量的指针不能通过解引修改常量的值，但是指针本身可以变动其指向</span><br><span class="line">int * const p = 1 //指针常量，只读不能修改</span><br></pre></td></tr></table></figure>



<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="原型作用域（prototype-scope）"><a href="#原型作用域（prototype-scope）" class="headerlink" title="原型作用域（prototype scope）"></a>原型作用域（prototype scope）</h2><p>函数原型的形参的名字不必和声明所用的形参相同</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件作用域"><a href="#文件作用域" class="headerlink" title="文件作用域"></a>文件作用域</h2><p>只有函数名和全局变量拥有</p>
<p>默认拥有文件作用域的变量或函数拥有外部链接属性<code>external</code></p>
<p>通过<code>static</code>修饰使之改为内部链接属性<code>internal</code></p>
<p>而<code>none</code>空链接属性不具备链接的能力</p>
<h2 id="代码块作用域"><a href="#代码块作用域" class="headerlink" title="代码块作用域"></a>代码块作用域</h2><p>通常是<code>&#123;&#125;</code>内定义的变量，在代码块结束后，生存期&#x2F;生命周期结束，内存释放</p>
<h2 id="存储作用域"><a href="#存储作用域" class="headerlink" title="存储作用域"></a>存储作用域</h2><ul>
<li>自动变量<code>auto</code><ul>
<li>代码块中声明的变量默认的存储类型</li>
<li>代码块作用域、自动存储期、空链接属性</li>
</ul>
</li>
<li>寄存器变量<code>register</code><ul>
<li>可能被存到cpu的寄存器，可能</li>
<li>类似<code>auto</code>，但无法取址</li>
</ul>
</li>
<li>静态局部变量<code>static</code><ul>
<li><code>static</code>声明局部变量，使之拥有静态存储期，直到程序结束才释放，但作用域仍然为局部的作用域，一经初始化，不再运行后续的声明，如函数内用<code>static</code>修饰的变量首次被初始化后，当函数复用，将不再运行<code>static</code>的声明</li>
<li><code>static</code>声明非局部变量或函数，设为<code>internal</code></li>
</ul>
</li>
<li>外部链接<code>external</code></li>
<li><code>typedef</code></li>
</ul>
<h1 id="快速排列-quick-sort"><a href="#快速排列-quick-sort" class="headerlink" title="快速排列_quick_sort_"></a>快速排列_quick_sort_</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> le, <span class="type">int</span> ri)</span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>&#125;;</span><br><span class="line">	<span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> right = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>])<span class="number">-1</span>;</span><br><span class="line">	quick_sort(<span class="built_in">array</span>,left,right);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=right;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> le, <span class="type">int</span> ri)</span>&#123;</span><br><span class="line">	<span class="type">int</span> i = le, j = ri;</span><br><span class="line">	<span class="type">int</span> m = <span class="built_in">array</span>[(ri+le)/<span class="number">2</span>];	<span class="comment">//设置ij区间基准值，即中间的那个元素</span></span><br><span class="line">	<span class="keyword">while</span> (i&lt;=j)&#123;	<span class="comment">//当左端点i超过右端点j，判断为第一轮分类结束，结束循环</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">array</span>[i]&lt;m)&#123;	<span class="comment">//从左往右，直到找到大于大于等于基准值的元素</span></span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">array</span>[j]&gt;m)&#123;</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;=j)&#123;<span class="comment">//每一轮的最后一次互换后再会进行一次循环，执行至少一次i++和j--用来确定后续迭代区间端点的位置，此时i在j右边相邻，此时不用互换</span></span><br><span class="line">			<span class="type">int</span> temp = <span class="built_in">array</span>[i];</span><br><span class="line">			<span class="built_in">array</span>[i] = <span class="built_in">array</span>[j];</span><br><span class="line">			<span class="built_in">array</span>[j] = temp;</span><br><span class="line">			i++;<span class="comment">//右移一格，循环继续 </span></span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;ri)&#123;<span class="comment">//终止迭代的条件是端点重合或溢出</span></span><br><span class="line">		quick_sort(<span class="built_in">array</span>, i, ri);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(j&gt;le)&#123;</span><br><span class="line">		quick_sort(<span class="built_in">array</span>, le, j);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h1><p>头文件：<code>&lt;stdlib.h&gt;</code></p>
<h2 id="栈与堆"><a href="#栈与堆" class="headerlink" title="栈与堆"></a>栈与堆</h2><h3 id="栈（Hack）"><a href="#栈（Hack）" class="headerlink" title="栈（Hack）"></a>栈（Hack）</h3><p>栈由操作系统自动分配，用于存放函数参数值、局部变量等短生存期的变量，变量按照定义顺序先后压入栈中，生长方向从高到低，生存期一结束os就自动释放内存。</p>
<h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><p>堆由开发人员分配和释放，程序结束后os也会回收。堆的内存地址生长方向与栈相反，由低到高。 </p>
<p><img src="/2024/09/13/C-%E4%BB%8Ehello-world%E5%88%B0goodbye-world/1.png" alt="内存生长示意图"></p>
<h2 id="malloc-函数"><a href="#malloc-函数" class="headerlink" title="malloc()函数"></a>malloc()函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(size)</span></span><br></pre></td></tr></table></figure>

<p>malloc函数向系统申请size个字节的内存空间，返回一个指向该内存空间的指针，默认为void空属性指针（意味着可以任意赋值给各个类型的指针，一些编译器，如dev c++要求必须先强制转化为对应数据类型），如果调用失败或设置size为0，返回NULL</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>	</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>	</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span>* ptr = (<span class="type">int</span>* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>要注意到，先后由calloc(),malloc()存储的数据通常不连续。</p>
<h2 id="free-函数"><a href="#free-函数" class="headerlink" title="free()函数"></a>free()函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span>* ptr)</span></span><br></pre></td></tr></table></figure>

<p>释放由malloc、calloc、realloc申请的指针参数指向的内存空间，但并不改变该指针的值，所以调用后该指针指向原先的地方（变为非法空间）</p>
<p>不及时清理、丢失内存（指针指向另一个地址，原地址丢失）将造成内存泄漏。</p>
<h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><ul>
<li>宏定义</li>
<li>文件包含</li>
<li>条件编译</li>
</ul>
<h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><h3 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h3><ul>
<li>#define A apple &#x2F;&#x2F;用A替换apple</li>
<li>#undefine A apple</li>
</ul>
<h3 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h3><p><code>#define SQUARE(x)   ((x)*(x))</code></p>
<p><code>#define MIN(x,y)  ((x &lt; y) ? x : y)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x)   ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x,y)  ((x &lt; y) ? x : y)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">7</span>,y=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;SQUARE(x)=%d\n&quot;</span>,SQUARE(x));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MIN(x,y)=%d\n&quot;</span>,MIN(x,y));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> <code>#define SQUARE(x)  x*x</code>             (plus:不加括号的后果)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x)  x*x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">7</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;SQUARE(x)=%d\n&quot;</span>,SQUARE(x));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;SQUARE(x+1)=%d\n&quot;</span>,SQUARE(x+<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*SQUARE(x)=49</span></span><br><span class="line"><span class="comment">SQUARE(x+1)=15*/</span></span><br></pre></td></tr></table></figure>



<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> &#123;</span> </span><br><span class="line">    member-<span class="built_in">list</span></span><br><span class="line">    member-<span class="built_in">list</span> </span><br><span class="line">    member-<span class="built_in">list</span>  </span><br><span class="line">    ...</span><br><span class="line">&#125; variable-<span class="built_in">list</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>tag</strong> 是结构体标签。</p>
<p><strong>member-list</strong> 是标准的变量定义，比如 <strong>int i;</strong> 或者 **float f;**，或者其他有效的变量定义。</p>
<p><strong>variable-list</strong> 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。</p>
<p>访问变量使用.运算符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span>   book_id;</span><br><span class="line">&#125; book = &#123;<span class="string">&quot;C 语言&quot;</span>, <span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;编程语言&quot;</span>, <span class="number">123456</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n&quot;</span>, book.title, book.author, book.subject, book.book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dating</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> year;</span><br><span class="line">	<span class="type">int</span> month;</span><br><span class="line">	<span class="type">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poster</span>&#123;</span></span><br><span class="line">	<span class="type">char</span> title[<span class="number">50</span>];</span><br><span class="line">	<span class="type">char</span> content[<span class="number">50</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dating</span> <span class="title">date</span>;</span></span><br><span class="line">&#125;post = &#123;</span><br><span class="line">	<span class="string">&quot;helloworld&quot;</span>,</span><br><span class="line">	<span class="string">&quot;hahaha&quot;</span>,</span><br><span class="line">	&#123;<span class="number">2024</span>,<span class="number">12</span>,<span class="number">01</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;title:%s\ncontent:%s\ndate:%d %d %d\n&quot;</span>,post.title, post.content, post.date.year,post.date.month,post.date.day);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poster</span> * <span class="title">PTR</span></span></span><br><span class="line"><span class="class"><span class="title">PTR</span> =</span> *post</span><br><span class="line">    <span class="comment">//通过结构体指针访问变量</span></span><br><span class="line">(*PTR).title = <span class="string">&quot;12345&quot;</span></span><br><span class="line">PTR -&gt; title</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> poster)); <span class="comment">//112</span></span><br></pre></td></tr></table></figure>



<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><p>红色为指针，蓝色为由结构体定义的非指针类型的数据，一蓝一红组成一个“节点”</p>
<p><img src="/2024/09/13/C-%E4%BB%8Ehello-world%E5%88%B0goodbye-world/2.png" alt="单链表图示"></p>
<h2 id="请求代码"><a href="#请求代码" class="headerlink" title="请求代码"></a>请求代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="type">char</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;是否------？(Y/N)\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">	getchar();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(a !=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;a !=<span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入(Y/N)\n&quot;</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;是否-----？(Y/N)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">		getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">		<span class="comment">//功能 Y </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//功能 N </span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h2><p>实战：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line">	<span class="type">char</span> title[<span class="number">50</span>];</span><br><span class="line">	<span class="type">char</span> writer[<span class="number">50</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddBook</span><span class="params">(<span class="keyword">struct</span> Book * book)</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;书名：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,book-&gt;title);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;作者：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,book-&gt;writer);</span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InputBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">book</span>;</span><span class="comment">//book 是局部变量，尽管我用malloc申请了一块内存</span></span><br><span class="line">	</span><br><span class="line">	book = (<span class="keyword">struct</span> Book * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line">	<span class="keyword">if</span> (!book) &#123;<span class="comment">//溢出报警，malloc()后面可选</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AddBook(book); </span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*链表的移动*/</span></span><br><span class="line">	book-&gt;next = *library;</span><br><span class="line">	*library = book;<span class="comment">//回到头部</span></span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (*library != <span class="literal">NULL</span>)&#123;<span class="comment">//这里实现的是先打印最后一个，也就是最先输入的，如果像反过来，适当调换顺序即可</span></span><br><span class="line">		<span class="keyword">if</span> ((*library)-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			PrintBook(&amp;((*library)-&gt;next));</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n作者：%s\n序号：(%d)\n&quot;</span>,(*library)-&gt;title,(*library)-&gt;writer,count);</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n作者：%s\n序号：(%d)\n&quot;</span>,(*library)-&gt;title,(*library)-&gt;writer,count);</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sorry, no information inputed!&quot;</span>);</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> **<span class="title">library</span> =</span> &amp;head;<span class="comment">/*需要指向一个合法的链表头指针，不然程序中大量含*library的语句无法进行</span></span><br><span class="line"><span class="comment">	本来写的是library = 0来着*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> a;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;是否录入书籍信息？(Y/N)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">		getchar();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(a !=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;a !=<span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;是否录入书籍信息？(Y/N)\n&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">			getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">			InputBook(library);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	PrintBook(library);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《爱丽丝梦游仙境》</span><br><span class="line">作者：刘易斯·卡罗尔</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《光荣与梦想》</span><br><span class="line">作者：刘慈欣</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《高等数学》</span><br><span class="line">作者：同济大学数学系</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《我的天才女友》</span><br><span class="line">作者：莱农</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">N</span><br><span class="line">书名：《爱丽丝梦游仙境》</span><br><span class="line">作者：刘易斯·卡罗尔</span><br><span class="line">序号：(0)</span><br><span class="line">书名：《光荣与梦想》</span><br><span class="line">作者：刘慈欣</span><br><span class="line">序号：(1)</span><br><span class="line">书名：《高等数学》</span><br><span class="line">作者：同济大学数学系</span><br><span class="line">序号：(2)</span><br><span class="line">书名：《我的天才女友》</span><br><span class="line">作者：莱农</span><br><span class="line">序号：(3)</span><br></pre></td></tr></table></figure>

<h2 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line">	<span class="type">char</span> title[<span class="number">50</span>];</span><br><span class="line">	<span class="type">char</span> writer[<span class="number">50</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddBook</span><span class="params">(<span class="keyword">struct</span> Book * book)</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;书名：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,book-&gt;title);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;作者：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,book-&gt;writer);</span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InputBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">book</span>, * <span class="title">temp</span>;</span></span><br><span class="line">	</span><br><span class="line">	book = (<span class="keyword">struct</span> Book * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line">	<span class="keyword">if</span> (!book) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	AddBook(book);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AddBook(book); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(*library == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		book-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		*library = book;<span class="comment">//头部出现 </span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	temp = *library;</span><br><span class="line">	<span class="comment">//library是头部，所以要尾插法必须定位单链表尾部！！</span></span><br><span class="line">	<span class="keyword">while</span>(temp-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	temp-&gt;next = book;</span><br><span class="line">	book-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;<span class="comment">//略有不同 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (*library != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*library)-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n作者：%s\n序号：(%d)\n&quot;</span>,(*library)-&gt;title,(*library)-&gt;writer,count);</span><br><span class="line">			count++;</span><br><span class="line">			PrintBook(&amp;((*library)-&gt;next));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n作者：%s\n序号：(%d)\n&quot;</span>,(*library)-&gt;title,(*library)-&gt;writer,count);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Sorry, no information inputed!&quot;</span>);</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> **<span class="title">library</span> =</span> &amp;head;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> a;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;是否录入书籍信息？(Y/N)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">		getchar();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(a !=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;a !=<span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;是否录入书籍信息？(Y/N)\n&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">			getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">			InputBook(library);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	PrintBook(library);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《百年孤独》</span><br><span class="line">作者：加西亚·马尔克斯</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《太阳照常升起》</span><br><span class="line">作者：海明威</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《不能承受的生命之轻》</span><br><span class="line">作者：米兰·昆德拉</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">Y</span><br><span class="line">书名：《第二性》</span><br><span class="line">作者：西蒙娜·德·波伏娃</span><br><span class="line">是否录入书籍信息？(Y/N)</span><br><span class="line">N</span><br><span class="line">书名：《百年孤独》</span><br><span class="line">作者：加西亚·马尔克斯</span><br><span class="line">序号：(0)</span><br><span class="line">书名：《太阳照常升起》</span><br><span class="line">作者：海明威</span><br><span class="line">序号：(1)</span><br><span class="line">书名：《不能承受的生命之轻》</span><br><span class="line">作者：米兰·昆德拉</span><br><span class="line">序号：(2)</span><br><span class="line">书名：《第二性》</span><br><span class="line">作者：西蒙娜·德·波伏娃</span><br><span class="line">序号：(3)</span><br></pre></td></tr></table></figure>



<h2 id="增删插查"><a href="#增删插查" class="headerlink" title="增删插查"></a>增删插查</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//头插法与尾插法 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化结构体BOOK</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line">	<span class="type">char</span> title[<span class="number">50</span>];</span><br><span class="line">	<span class="type">char</span> writer[<span class="number">50</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">next</span>;</span><span class="comment">//创建结构体指针-自我指涉 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能 输入书籍数据 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddBook</span><span class="params">(<span class="keyword">struct</span> Book * book)</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;书名：&quot;</span>);</span><br><span class="line">	gets(book-&gt;title);<span class="comment">//使用 gets() 时，换行符从缓冲区中取出来被丢弃，所以缓冲区中不会遗留换行符</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;作者：&quot;</span>);</span><br><span class="line">	gets(book-&gt;writer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能 尾插 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RearInputBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;<span class="comment">//参数是指向结构体指针的指针（地址），业务功能中主要使用的是作为头部library的取指*library </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">book</span>, * <span class="title">temp</span>;</span></span><br><span class="line">	</span><br><span class="line">	book = (<span class="keyword">struct</span> Book * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));<span class="comment">/*为局部变量分配堆的空间*/</span></span><br><span class="line">	<span class="comment">/*效果是局部变量本身(book)生命周期同函数运行一同结束*/</span></span><br><span class="line">	<span class="comment">/*但堆上的数据只要不用语句主动释放，就会留在内存中，且通过头部head,即library利用层层指针索引*/</span> </span><br><span class="line">	</span><br><span class="line">	<span class="comment">//内存溢出的意外 </span></span><br><span class="line">	<span class="keyword">if</span> (!book) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	AddBook(book); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(*library == <span class="literal">NULL</span>)&#123;<span class="comment">//首次录入书籍信息 </span></span><br><span class="line">		book-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		*library = book;<span class="comment">//头部出现 </span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	temp = *library;</span><br><span class="line">	<span class="comment">//library是头部，所以要尾插法必须 定 位 单链表尾部！！</span></span><br><span class="line">	<span class="keyword">while</span>(temp-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	temp-&gt;next = book;</span><br><span class="line">	book-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能 头插 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FrontInputBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">book</span>;</span><span class="comment">//book 是局部变量，尽管我用malloc申请了一块内存</span></span><br><span class="line">	</span><br><span class="line">	book = (<span class="keyword">struct</span> Book * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line">	<span class="keyword">if</span> (!book) &#123;<span class="comment">//溢出报警，malloc()后面可选</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AddBook(book); </span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*链表的移动*/</span></span><br><span class="line">	book-&gt;next = *library;</span><br><span class="line">	*library = book;<span class="comment">//回到头部</span></span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能 打印单链</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintBook</span><span class="params">(<span class="keyword">struct</span> Book ** library,<span class="type">int</span> count)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (*library != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ((*library)-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n作者：%s\n序号：(%d)\n&quot;</span>,(*library)-&gt;title,(*library)-&gt;writer,count);</span><br><span class="line">			count++;</span><br><span class="line">			PrintBook(&amp;((*library)-&gt;next),count);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n作者：%s\n序号：(%d)\n&quot;</span>,(*library)-&gt;title,(*library)-&gt;writer,count);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;抱歉，链表内尚未录入书籍信息。&quot;</span>);</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能 查询</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueryBook</span><span class="params">(<span class="keyword">struct</span> Book ** library, <span class="type">char</span> title[<span class="number">50</span>])</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">temp</span> =</span> *library;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>,c;</span><br><span class="line">	<span class="keyword">if</span>(*library != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">while</span>(temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			count++;</span><br><span class="line">			c = <span class="built_in">strcmp</span>(temp-&gt;title,title);</span><br><span class="line">			<span class="keyword">if</span>(c == <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;查询成功！\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;书名:%s\n作者：%s\n序号：%d\n&quot;</span>,title,temp-&gt;writer,count);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;查询失败，请检查书名拼写！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;抱歉，链表内尚未录入书籍信息。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//询问 输入 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuestAddBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="type">char</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;是否录入书籍信息？(y/n)\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line">	getchar();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(a !=<span class="string">&#x27;y&#x27;</span>&amp;&amp;a !=<span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入(y/n)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;是否录入书籍信息？(y/n)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">		getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="type">char</span> a;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;头插或尾插？(f/r)\n&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">			getchar();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(a !=<span class="string">&#x27;f&#x27;</span>&amp;&amp;a !=<span class="string">&#x27;r&#x27;</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入(f/r)\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;头插或尾插？(f/r)\n&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">				getchar();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (a == <span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">				FrontInputBook(library); </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				RearInputBook(library);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//询问 打印 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuestPrintBook</span><span class="params">(<span class="keyword">struct</span> Book ** library)</span>&#123;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="type">char</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;是否打印全部书籍内容？(y/n)\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">	getchar();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(a !=<span class="string">&#x27;y&#x27;</span>&amp;&amp;a !=<span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入(y/n)\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;是否打印全部书籍内容？(y/n)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">		getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">		PrintBook(library,count);<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//询问 查询</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuestQueryBook</span><span class="params">(<span class="keyword">struct</span> Book** library)</span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="type">char</span> a;</span><br><span class="line">		<span class="type">char</span> title[<span class="number">50</span>];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;是否查询？(y/n)\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);<span class="comment">//前置空格将被省略</span></span><br><span class="line">		getchar();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(a !=<span class="string">&#x27;y&#x27;</span>&amp;&amp;a !=<span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">	        <span class="built_in">printf</span>(<span class="string">&quot;请输入(y/n)\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;是否查询？(y/n)\n&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;a);</span><br><span class="line">			getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入书名：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot; %s&quot;</span>,&amp;title);</span><br><span class="line">			getchar();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;——————————————正在查询——————————————\n\n&quot;</span>);</span><br><span class="line">			QueryBook(library,title);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//功能 插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertBook</span><span class="params">(<span class="keyword">struct</span> Book** library)</span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">prev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">temp</span> =</span> *library;</span><br><span class="line"> 	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">book</span>;</span></span><br><span class="line"> 	</span><br><span class="line"> 	book = (<span class="keyword">struct</span> Book * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line"> 	<span class="keyword">if</span> (!book) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新的书籍信息要插入到序号几：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>,&amp;a);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;序号非法，已退出插入模式\n&quot;</span>); </span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		prev = temp;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">		AddBook(book); </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">/*这里原先有2个重大错误/(ㄒoㄒ)/</span></span><br><span class="line"><span class="comment">			一个是用temp去替代*library，要知道，temp指向的一直是存放在堆中的动态内存，但不影响temp是局部变量奥</span></span><br><span class="line"><span class="comment">			另一个是没有分类讨论，以为新的book放到中间或者后面和放到开头是一样的，但是放开头的话没有前面那个book,所以要像头插那样做 </span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			book-&gt;next = *library;</span><br><span class="line">			*library = book;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			prev-&gt;next = book;</span><br><span class="line">			book-&gt;next = temp;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Book</span> **<span class="title">library</span> =</span> &amp;head;<span class="comment">//定义头部，一个指向NULL指针的指针 </span></span><br><span class="line">	<span class="type">char</span> a; </span><br><span class="line">	</span><br><span class="line">	QuestAddBook(library);</span><br><span class="line">	QuestPrintBook(library);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入要执行的操作(a/p/q/i)&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a); </span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">switch</span>(a)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:QuestAddBook(library);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:QuestPrintBook(library);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:QuestQueryBook(library);<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:InsertBook(library);<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注：字符串的比较必须使用strcmp(),否则直接用变量名比较其实只是用其首地址在比较</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef()"></a>typedef()</h1><p>给数据类型起别名</p>
<p>一次定义俩</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> integer,*ptrofint;</span><br></pre></td></tr></table></figure>



<p>结构体使用typedef</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line">	······</span><br><span class="line">&#125;Book,*PBook;</span><br><span class="line"></span><br><span class="line">Book book;</span><br></pre></td></tr></table></figure>

<p>更多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef char s_txt[50];//50个元素的字符型数组</span><br><span class="line">typedef char (*ptr_l_txt)[500];//指向500个元素的字符型数组的指针</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h1><p>每个“属性”（共用体成员）的地址均相同</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">A</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">&#125;aaa;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n%p\n%p&quot;</span>,&amp;aaa.a,&amp;aaa.b,&amp;aaa.c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0000000000407030</span><br><span class="line">0000000000407030</span><br><span class="line">0000000000407030</span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 0.08293 seconds with return value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>



<h1 id="枚举体"><a href="#枚举体" class="headerlink" title="枚举体"></a>枚举体</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum 枚举体类型 &#123;枚举常量1,枚举常量2,···&#125;;// 声明枚举体</span><br><span class="line">enum 枚举体类型 枚举变量;//定义枚举变量</span><br><span class="line"></span><br><span class="line">默认 「枚举常量1」=1，后面依次+1</span><br><span class="line">也可以这样声明：</span><br><span class="line">enum 枚举体类型 &#123;枚举常量1 = 10,枚举常量2,···&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="位"><a href="#位" class="headerlink" title="位"></a>位</h1><h2 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> a:<span class="number">1</span>;<span class="comment">//不能超过32</span></span><br><span class="line">	<span class="type">int</span> b:<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> c:<span class="number">2</span>;</span><br><span class="line">&#125;A;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	A.a = <span class="number">1</span>;</span><br><span class="line">	A.b = <span class="number">1</span>;</span><br><span class="line">	A.c = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a=%d  b=%d  c=%d\n&quot;</span>,A.a,A.b,A.c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;size of A is %d&quot;</span>,<span class="keyword">sizeof</span>(A));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=1  b=-1  c=-2</span><br><span class="line">size of A is 4</span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 0.08447 seconds with return value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<p>支持位域的数据类型：signed int&#x2F;unsigned int&#x2F;bool</p>
<p>可能支持位域的数据类型：signed char&#x2F;unsigned char</p>
<h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">~a 按位取反</span><br><span class="line">a<span class="built_in">&amp;</span>b 按位与</span><br><span class="line">a<span class="built_in">^</span>b 按位异或</span><br><span class="line">a|b 按位或</span><br></pre></td></tr></table></figure>

<p>优先级由上至下递减</p>
<h2 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a;</span><br><span class="line">a &lt;&lt; 3;//二进制数向左移位3,用0填充空位，这里相当于整个数被乘上8</span><br><span class="line">a &lt;&lt;= 3;//a = a&lt;&lt;3</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
