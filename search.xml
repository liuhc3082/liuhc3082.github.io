<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言——从hello world到goodbye world (0)</title>
    <url>/2024/10/10/C0/</url>
    <content><![CDATA[<h2 id="9-13"><a href="#9-13" class="headerlink" title="9&#x2F;13"></a>9&#x2F;13</h2><p>1.IDE（Integrated Development Environment）集成开发环境 &#x3D; 编辑器 + 编译器</p>
<p>推荐： DevC++  VScode</p>
<p>保存-编译运行&#x2F;F9</p>
<ol>
<li><p>%d  表示有符号十进制整数。</p>
</li>
<li><p>%f  表示单精度浮点数。</p>
</li>
<li><p>%c  表示字符。</p>
</li>
<li><p>%s  表示字符串。</p>
</li>
<li><p>%p  表示指针的值。</p>
</li>
<li><p>%x  表示十六进制整数。</p>
</li>
<li><p>%f 表述双精度浮点数。</p>
</li>
</ol>
<p>常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> AMOUNT = <span class="number">1000</span> <span class="comment">//变量，一经声明就要初始化</span></span><br><span class="line">    <span class="comment">//已声明的变量不能被声明为常量</span></span><br></pre></td></tr></table></figure>

<p>浮点数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>/<span class="number">3</span>=<span class="number">3.333333</span>	<span class="comment">//注：整数之间的运算一定得到整数，整数与浮点数都存在时，会把整数改成浮点数</span></span><br></pre></td></tr></table></figure>

<h3 id="循环switch-case"><a href="#循环switch-case" class="headerlink" title="循环switch case"></a>循环switch case</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">/* 可选的 */</span></span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">/* 可选的 */</span></span><br><span class="line">    <span class="comment">/* 您可以有任意数量的 case 语句 */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选的 */</span></span><br><span class="line">       statement(s);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a><strong>逗号表达式</strong></h3><p>(表达式1，表达式2，…，表达式n)，逗号优先级为最后，输出为表达式n（Casio的连续计算也是如此）</p>
<p>例</p>
<p><code>int b,c,a=(b=3,++(c=b*2)) ;</code></p>
<p>得 a&#x3D;7</p>
<h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>（条件 ? 表达式1 : 表达式2;），条件为真输出1，假输出2</p>
<p>例</p>
<p><code>int Max(int a,intb)&#123;return a &gt; b ? a : b;&#125;</code></p>
<h3 id="注意到"><a href="#注意到" class="headerlink" title="注意到"></a><strong>注意到</strong></h3><p><code>i++</code>表示先取i原先的值，再+1,</p>
<p><code>++i</code>表示先+1，再输出i</p>
<h2 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a><strong>变量的生命周期</strong></h2><p><strong>循环内和循环体均可以声明变量</strong>，且循环内定义的变量和循环外定义的变量，即使名称相同，其地址也是不同的，所以不会报错，当一次循环结束，变量死去</p>
<p>在int mian(){}主函数外定义或声明的变量为全局变量，在函数内部定义或声明的变量为局部变量</p>
<h2 id="定义和声明的区别"><a href="#定义和声明的区别" class="headerlink" title="定义和声明的区别"></a>定义和声明的区别</h2><p><strong>声明</strong>是用来告诉编译器变量的名称和类型，而不分配内存。</p>
<p><strong>定义</strong>是提供声明的实体的具体实现或分配存储空间。对于变量，定义是为其分配内存；对于函数或方法，定义是提供其代码体；对于类，定义是描述其结构和方法的代码块。</p>
<p>不初始化变量并不意味着不是定义了变量，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">000000000062FE1C</span><br></pre></td></tr></table></figure>

<p><em><strong>注：有时，声明变量指不初始化变量，请根据语境注意辨析</strong></em></p>
<h3 id="使用extern声明在另一个文件里声明的变量-函数也行"><a href="#使用extern声明在另一个文件里声明的变量-函数也行" class="headerlink" title="使用extern声明在另一个文件里声明的变量(函数也行)"></a>使用extern声明在另一个文件里声明的变量(函数也行)</h3><p>在Dev C++中，要将两个文件放在同一个项目的同级里；在GCC中，可以同步编译。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> count;  <span class="comment">// 声明变量，不分配存储空间</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Main: %d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// other.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">10</span>;  <span class="comment">// 定义变量并分配存储空间</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Other: %d\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 main.c : <code>Main: 10</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明结构体</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buiding</span>;</span></span><br></pre></td></tr></table></figure>



<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>形式：类型 数组名[常量-表示元素个数，即数组维度]</p>
<p> 如：int a[5]</p>
<p>访问：a[5]×  索引大于最大元素索引（0-4），造成<strong>数组越界（不会报错），会输出奇怪的东西（尚不明确），且可能造成死机（目前没碰到）</strong></p>
<p>也可以不填，<strong>直接用元素赋值</strong>，也是一种初始化方式：</p>
<p>如：int a[] &#x3D; {1,2,3,4,5}</p>
<p><strong>注意到</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b[i]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>0<br>35<br>0<br>0</p>
<p>得到了我不签无法理解的垃圾值，因此初始化很必要</p>
<p><code>int b[5] = &#123;4，1&#125;</code>	前几位为4，1，其余元素全部初始化为0</p>
<p><code>int a[8] = &#123;[1]=1,[4]=6&#125;</code></p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>内存地址是一个<strong>正的十六进制数</strong>，每个变量的内存地址长度为4位或8位的16进制数（取决于默认的位数，32位平台占4字节，64位平台占8字节，用sizeof()看）</p>
<p><code>int a</code>整型变量a</p>
<p><code>int* a</code>或<code>int*a</code>或<code>int *a</code>指针变量a,指向某整型变量，其中a表示地址，通过<code>a=&amp;b</code>取址&#x2F;赋值，通过*a输出指向变量的值（即b)，a的加减乘除是无意义的，为了避免野指针，通常用<code>int* a = NULL</code>初始化,<strong>int±1移动4个字节（32位和64位都是）</strong></p>
<p><code>char*a</code>同理，也是8位地址，但是**+1只增加一字节内存**，因为ascii码只有1字节&#x3D;8位&#x3D;256bit  那么多种</p>
<p>注1：指针变量加1，即向后移动1 个位置表示指针变量指向下一个数据元素的<strong>首地址</strong>。而不是在原地址基础上加1。至于真实的地址加了多少，要看原来指针指向的数据类型是什么。</p>
<p>注2：*<strong>的优先级比较低</strong>（低于[]和++)，如果还有其他运算符，建议先（*p)，一个表达式如果输出为指针，那么他就是一个指针表达式。</p>
<p>数组的指针:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> a[] = <span class="string">&quot;we&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* b = <span class="literal">NULL</span>;</span><br><span class="line">	b = a;<span class="comment">//不要加上&amp;a，会报错</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p  %c\n&quot;</span>,b,*b) ;</span><br><span class="line">	b++;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p  %c&quot;</span>,b,*b) ;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="number">000000000062F</span>E10  w</span><br><span class="line"><span class="number">000000000062F</span>E11  e</span><br></pre></td></tr></table></figure>

<p>可见，当一个指针赋值到一个数组，将指向这个数组的第一个元素，指针的移动导致元素序号的移动，说明数组中的数据是线性存储在内存中的。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>C语言从上往下编译，主函数要放到最后。</strong></p>
<p>函数声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">func1<span class="comment">/*函数一功能*/</span></span><br><span class="line">func2<span class="comment">/*函数二功能*/</span></span><br></pre></td></tr></table></figure>



<h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>#include “stdio.h” 这也是被允许的√</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s1[] = <span class="string">&quot;ysu&quot;</span>;<span class="comment">//&quot;&quot;包的是字符串常量 </span></span><br><span class="line">    <span class="type">char</span> s2[] =&#123;<span class="string">&quot;ysu&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> s3[] =&#123;<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;<span class="comment">//&#x27;&#x27;包的是字符常量，单引号内只能填一个字符，表示字符常量 </span></span><br><span class="line"><span class="comment">//    s1[0] = &quot;z&quot;; 报错[Error] invalid conversion from &#x27;const char*&#x27; to &#x27;char&#x27; [-fpermissive]</span></span><br><span class="line">    s2[<span class="number">0</span>] = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    s3[<span class="number">0</span>] = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c\n&quot;</span>,s1[<span class="number">0</span>],s2[<span class="number">0</span>],s3[<span class="number">0</span>]);<span class="comment">//y z z</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//    char a=&quot;a&quot;;报错[Error] invalid conversion from &#x27;const char*&#x27; to &#x27;char&#x27; [-fpermissive]</span></span><br><span class="line">    <span class="type">char</span> a=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    a=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof_s2=%d\n&quot;</span>,<span class="keyword">sizeof</span>(s2));<span class="comment">//sizeof_s2=4   strlen_s2=3</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;strlen_s2=%d\n&quot;</span>,<span class="built_in">strlen</span>(s2));<span class="comment">//不考虑停止符</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s2);<span class="comment">//zsu</span></span><br><span class="line">	</span><br><span class="line">	s2[<span class="number">2</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s2);<span class="comment">// \0之后的会省略   zs</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> ss[]=<span class="string">&quot;qwerty&quot;</span> ;<span class="comment">//strcpy与strncpy</span></span><br><span class="line">	<span class="built_in">strcpy</span>(ss,s1);<span class="comment">//注意字符串不要溢出了，使用strncpy可限制复制字符串长度 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,ss);<span class="comment">//ysu</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">strcat</span>(s1,s2);<span class="comment">//连接，然后存到s1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s1); <span class="comment">//ysuzs</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/2024/07/25/My-New-Post/</url>
    <content><![CDATA[<p>祝贺~第一支<a href="https://liuhc3082.github.io/">博客</a> ！&#x1f600;</p>
<p>hexo部署延迟好像很久，是我的错觉吗，，，<br><img src="/2024/07/25/My-New-Post/kitty.jpg" alt="猫猫"></p>
]]></content>
      <tags>
        <tag>☀️</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
